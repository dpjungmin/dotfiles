(defwindow sidebar
  :monitor 0
  :geometry (geometry :x "0"
                      :y "0"
                      :width "60px"
                      :height "100%"
                      :anchor "left center")
  :stacking "fg"
  :exclusive false
  :focusable true
  (sidebar))

(defwidget sidebar []
  (box :class "sidebar"
       :orientation "vertical"
    (top)
    (bottom)))

(defwidget top []
  (box :class "top"
       :valign "start"
       :orientation "vertical"
       :space-evenly false
    (workspaces)))

(defwidget bottom []
  (box :class "bottom"
       :valign "end"
       :orientation "vertical"
       :space-evenly false
    (wifi)
    (battery)
    (time)))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "vertical"
       :space-evenly false
    (for workspace in workspaces
      (button :class {active-workspace == workspace ? "active" : "inactive"}
              :onclick "hyprctl dispatch workspace ${workspace}" 
        workspace))))

(defwidget wifi []
  (box :class "wifi"
       :orientation "vertical"
    (button :class {wifi-connected == "up" ? "connected" : "disconnected"}
            :tooltip {wifi-connected == "up" ? "connected to ${wifi-ssid}" : ""} "")))

(defwidget battery []
  (box :class "battery"
       :orientation "vertical"
    (button :class {power-status == "Charging" ? "charging" : ""}
            :tooltip "${power-status}" "${power-capacity}%")))

(defwidget time []
  (box :class "time"
       :valign "end"
       :orientation "vertical"
    (button :class "hour" :tooltip "${time-hour}:${time-minute}:${time-second}" time-hour)
    (button :class "minute" :tooltip "${time-hour}:${time-minute}:${time-second}" time-minute)))

(defpoll active-workspace :interval "500ms"
                          :initial "1"
  `hyprctl activewindow -j | jq .workspace.id`)

(defpoll workspaces :interval "500ms"
                    :initial "[1]"
  `hyprctl workspaces -j | jq '[.[] | .id] | sort'`)

(defpoll time-hour :interval "1s"
  `date '+%H'`)

(defpoll time-minute :interval "1s"
  `date '+%M'`)

(defpoll time-second :interval "1s"
  `date '+%S'`)

(defpoll wifi-connected :interval "5s"
                        :initial "down"
  `cat /sys/class/net/w*/operstate`)

(defpoll wifi-ssid :interval "5s"
  `nmcli | grep "connected to" | cut -d ' ' -f4`)

(defpoll power-capacity :interval "5s"
                        :initial "0"
  `cat /sys/class/power_supply/BAT0/capacity`)

(defpoll power-status :interval "5s"
                      :initial ""
  `cat /sys/class/power_supply/BAT0/status`)
